// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.4
// source: bfsp.proto

package bfsp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncryptedFileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []byte `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EncryptedFileMetadata) Reset() {
	*x = EncryptedFileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedFileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedFileMetadata) ProtoMessage() {}

func (x *EncryptedFileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedFileMetadata.ProtoReflect.Descriptor instead.
func (*EncryptedFileMetadata) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{0}
}

func (x *EncryptedFileMetadata) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EncryptedFileMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FileServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *FileServerMessage_Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// Types that are assignable to Message:
	//
	//	*FileServerMessage_UploadChunk_
	//	*FileServerMessage_ChunksUploadedQuery_
	//	*FileServerMessage_DownloadChunkQuery_
	//	*FileServerMessage_DeleteChunksQuery_
	//	*FileServerMessage_UploadFileMetadata_
	//	*FileServerMessage_DownloadFileMetadataQuery_
	//	*FileServerMessage_ListFileMetadataQuery_
	//	*FileServerMessage_ListChunkMetadataQuery_
	//	*FileServerMessage_DeleteFileMetadataQuery_
	//	*FileServerMessage_GetUsageQuery_
	//	*FileServerMessage_SetMasterKey
	//	*FileServerMessage_GetMasterKey
	Message isFileServerMessage_Message `protobuf_oneof:"message"`
}

func (x *FileServerMessage) Reset() {
	*x = FileServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage) ProtoMessage() {}

func (x *FileServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage.ProtoReflect.Descriptor instead.
func (*FileServerMessage) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1}
}

func (x *FileServerMessage) GetAuth() *FileServerMessage_Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (m *FileServerMessage) GetMessage() isFileServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FileServerMessage) GetUploadChunk() *FileServerMessage_UploadChunk {
	if x, ok := x.GetMessage().(*FileServerMessage_UploadChunk_); ok {
		return x.UploadChunk
	}
	return nil
}

func (x *FileServerMessage) GetChunksUploadedQuery() *FileServerMessage_ChunksUploadedQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_ChunksUploadedQuery_); ok {
		return x.ChunksUploadedQuery
	}
	return nil
}

func (x *FileServerMessage) GetDownloadChunkQuery() *FileServerMessage_DownloadChunkQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_DownloadChunkQuery_); ok {
		return x.DownloadChunkQuery
	}
	return nil
}

func (x *FileServerMessage) GetDeleteChunksQuery() *FileServerMessage_DeleteChunksQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_DeleteChunksQuery_); ok {
		return x.DeleteChunksQuery
	}
	return nil
}

func (x *FileServerMessage) GetUploadFileMetadata() *FileServerMessage_UploadFileMetadata {
	if x, ok := x.GetMessage().(*FileServerMessage_UploadFileMetadata_); ok {
		return x.UploadFileMetadata
	}
	return nil
}

func (x *FileServerMessage) GetDownloadFileMetadataQuery() *FileServerMessage_DownloadFileMetadataQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_DownloadFileMetadataQuery_); ok {
		return x.DownloadFileMetadataQuery
	}
	return nil
}

func (x *FileServerMessage) GetListFileMetadataQuery() *FileServerMessage_ListFileMetadataQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_ListFileMetadataQuery_); ok {
		return x.ListFileMetadataQuery
	}
	return nil
}

func (x *FileServerMessage) GetListChunkMetadataQuery() *FileServerMessage_ListChunkMetadataQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_ListChunkMetadataQuery_); ok {
		return x.ListChunkMetadataQuery
	}
	return nil
}

func (x *FileServerMessage) GetDeleteFileMetadataQuery() *FileServerMessage_DeleteFileMetadataQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_DeleteFileMetadataQuery_); ok {
		return x.DeleteFileMetadataQuery
	}
	return nil
}

func (x *FileServerMessage) GetGetUsageQuery() *FileServerMessage_GetUsageQuery {
	if x, ok := x.GetMessage().(*FileServerMessage_GetUsageQuery_); ok {
		return x.GetUsageQuery
	}
	return nil
}

func (x *FileServerMessage) GetSetMasterKey() *FileServerMessage_SetMasterEncryptionKey {
	if x, ok := x.GetMessage().(*FileServerMessage_SetMasterKey); ok {
		return x.SetMasterKey
	}
	return nil
}

func (x *FileServerMessage) GetGetMasterKey() *FileServerMessage_GetMasterEncryptionKey {
	if x, ok := x.GetMessage().(*FileServerMessage_GetMasterKey); ok {
		return x.GetMasterKey
	}
	return nil
}

type isFileServerMessage_Message interface {
	isFileServerMessage_Message()
}

type FileServerMessage_UploadChunk_ struct {
	UploadChunk *FileServerMessage_UploadChunk `protobuf:"bytes,2,opt,name=upload_chunk,json=uploadChunk,proto3,oneof"`
}

type FileServerMessage_ChunksUploadedQuery_ struct {
	ChunksUploadedQuery *FileServerMessage_ChunksUploadedQuery `protobuf:"bytes,3,opt,name=chunks_uploaded_query,json=chunksUploadedQuery,proto3,oneof"`
}

type FileServerMessage_DownloadChunkQuery_ struct {
	DownloadChunkQuery *FileServerMessage_DownloadChunkQuery `protobuf:"bytes,4,opt,name=download_chunk_query,json=downloadChunkQuery,proto3,oneof"`
}

type FileServerMessage_DeleteChunksQuery_ struct {
	DeleteChunksQuery *FileServerMessage_DeleteChunksQuery `protobuf:"bytes,5,opt,name=delete_chunks_query,json=deleteChunksQuery,proto3,oneof"`
}

type FileServerMessage_UploadFileMetadata_ struct {
	UploadFileMetadata *FileServerMessage_UploadFileMetadata `protobuf:"bytes,6,opt,name=upload_file_metadata,json=uploadFileMetadata,proto3,oneof"`
}

type FileServerMessage_DownloadFileMetadataQuery_ struct {
	DownloadFileMetadataQuery *FileServerMessage_DownloadFileMetadataQuery `protobuf:"bytes,7,opt,name=download_file_metadata_query,json=downloadFileMetadataQuery,proto3,oneof"`
}

type FileServerMessage_ListFileMetadataQuery_ struct {
	ListFileMetadataQuery *FileServerMessage_ListFileMetadataQuery `protobuf:"bytes,8,opt,name=list_file_metadata_query,json=listFileMetadataQuery,proto3,oneof"`
}

type FileServerMessage_ListChunkMetadataQuery_ struct {
	ListChunkMetadataQuery *FileServerMessage_ListChunkMetadataQuery `protobuf:"bytes,9,opt,name=list_chunk_metadata_query,json=listChunkMetadataQuery,proto3,oneof"`
}

type FileServerMessage_DeleteFileMetadataQuery_ struct {
	DeleteFileMetadataQuery *FileServerMessage_DeleteFileMetadataQuery `protobuf:"bytes,10,opt,name=delete_file_metadata_query,json=deleteFileMetadataQuery,proto3,oneof"`
}

type FileServerMessage_GetUsageQuery_ struct {
	GetUsageQuery *FileServerMessage_GetUsageQuery `protobuf:"bytes,11,opt,name=get_usage_query,json=getUsageQuery,proto3,oneof"`
}

type FileServerMessage_SetMasterKey struct {
	SetMasterKey *FileServerMessage_SetMasterEncryptionKey `protobuf:"bytes,12,opt,name=set_master_key,json=setMasterKey,proto3,oneof"`
}

type FileServerMessage_GetMasterKey struct {
	GetMasterKey *FileServerMessage_GetMasterEncryptionKey `protobuf:"bytes,13,opt,name=get_master_key,json=getMasterKey,proto3,oneof"`
}

func (*FileServerMessage_UploadChunk_) isFileServerMessage_Message() {}

func (*FileServerMessage_ChunksUploadedQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_DownloadChunkQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_DeleteChunksQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_UploadFileMetadata_) isFileServerMessage_Message() {}

func (*FileServerMessage_DownloadFileMetadataQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_ListFileMetadataQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_ListChunkMetadataQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_DeleteFileMetadataQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_GetUsageQuery_) isFileServerMessage_Message() {}

func (*FileServerMessage_SetMasterKey) isFileServerMessage_Message() {}

func (*FileServerMessage_GetMasterKey) isFileServerMessage_Message() {}

type UploadChunkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *string `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *UploadChunkResp) Reset() {
	*x = UploadChunkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChunkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkResp) ProtoMessage() {}

func (x *UploadChunkResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkResp.ProtoReflect.Descriptor instead.
func (*UploadChunkResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{2}
}

func (x *UploadChunkResp) GetErr() string {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return ""
}

type DownloadChunkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DownloadChunkResp_ChunkData_
	//	*DownloadChunkResp_Err
	Response isDownloadChunkResp_Response `protobuf_oneof:"response"`
}

func (x *DownloadChunkResp) Reset() {
	*x = DownloadChunkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChunkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkResp) ProtoMessage() {}

func (x *DownloadChunkResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkResp.ProtoReflect.Descriptor instead.
func (*DownloadChunkResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{3}
}

func (m *DownloadChunkResp) GetResponse() isDownloadChunkResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DownloadChunkResp) GetChunkData() *DownloadChunkResp_ChunkData {
	if x, ok := x.GetResponse().(*DownloadChunkResp_ChunkData_); ok {
		return x.ChunkData
	}
	return nil
}

func (x *DownloadChunkResp) GetErr() string {
	if x, ok := x.GetResponse().(*DownloadChunkResp_Err); ok {
		return x.Err
	}
	return ""
}

type isDownloadChunkResp_Response interface {
	isDownloadChunkResp_Response()
}

type DownloadChunkResp_ChunkData_ struct {
	ChunkData *DownloadChunkResp_ChunkData `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

type DownloadChunkResp_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*DownloadChunkResp_ChunkData_) isDownloadChunkResp_Response() {}

func (*DownloadChunkResp_Err) isDownloadChunkResp_Response() {}

type ChunksUploadedQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChunksUploadedQueryResp_Chunks
	//	*ChunksUploadedQueryResp_Err
	Response isChunksUploadedQueryResp_Response `protobuf_oneof:"response"`
}

func (x *ChunksUploadedQueryResp) Reset() {
	*x = ChunksUploadedQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunksUploadedQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksUploadedQueryResp) ProtoMessage() {}

func (x *ChunksUploadedQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksUploadedQueryResp.ProtoReflect.Descriptor instead.
func (*ChunksUploadedQueryResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{4}
}

func (m *ChunksUploadedQueryResp) GetResponse() isChunksUploadedQueryResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChunksUploadedQueryResp) GetChunks() *ChunksUploadedQueryResp_ChunksUploaded {
	if x, ok := x.GetResponse().(*ChunksUploadedQueryResp_Chunks); ok {
		return x.Chunks
	}
	return nil
}

func (x *ChunksUploadedQueryResp) GetErr() string {
	if x, ok := x.GetResponse().(*ChunksUploadedQueryResp_Err); ok {
		return x.Err
	}
	return ""
}

type isChunksUploadedQueryResp_Response interface {
	isChunksUploadedQueryResp_Response()
}

type ChunksUploadedQueryResp_Chunks struct {
	Chunks *ChunksUploadedQueryResp_ChunksUploaded `protobuf:"bytes,1,opt,name=chunks,proto3,oneof"`
}

type ChunksUploadedQueryResp_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*ChunksUploadedQueryResp_Chunks) isChunksUploadedQueryResp_Response() {}

func (*ChunksUploadedQueryResp_Err) isChunksUploadedQueryResp_Response() {}

type DeleteChunksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *string `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *DeleteChunksResp) Reset() {
	*x = DeleteChunksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChunksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunksResp) ProtoMessage() {}

func (x *DeleteChunksResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunksResp.ProtoReflect.Descriptor instead.
func (*DeleteChunksResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteChunksResp) GetErr() string {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return ""
}

type DeleteFileMetadataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *string `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *DeleteFileMetadataResp) Reset() {
	*x = DeleteFileMetadataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileMetadataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileMetadataResp) ProtoMessage() {}

func (x *DeleteFileMetadataResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileMetadataResp.ProtoReflect.Descriptor instead.
func (*DeleteFileMetadataResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteFileMetadataResp) GetErr() string {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return ""
}

type UploadFileMetadataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *string `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *UploadFileMetadataResp) Reset() {
	*x = UploadFileMetadataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileMetadataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileMetadataResp) ProtoMessage() {}

func (x *UploadFileMetadataResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileMetadataResp.ProtoReflect.Descriptor instead.
func (*UploadFileMetadataResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{7}
}

func (x *UploadFileMetadataResp) GetErr() string {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return ""
}

type DownloadFileMetadataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DownloadFileMetadataResp_EncryptedFileMetadata
	//	*DownloadFileMetadataResp_Err
	Response isDownloadFileMetadataResp_Response `protobuf_oneof:"response"`
}

func (x *DownloadFileMetadataResp) Reset() {
	*x = DownloadFileMetadataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileMetadataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileMetadataResp) ProtoMessage() {}

func (x *DownloadFileMetadataResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileMetadataResp.ProtoReflect.Descriptor instead.
func (*DownloadFileMetadataResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{8}
}

func (m *DownloadFileMetadataResp) GetResponse() isDownloadFileMetadataResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DownloadFileMetadataResp) GetEncryptedFileMetadata() *EncryptedFileMetadata {
	if x, ok := x.GetResponse().(*DownloadFileMetadataResp_EncryptedFileMetadata); ok {
		return x.EncryptedFileMetadata
	}
	return nil
}

func (x *DownloadFileMetadataResp) GetErr() string {
	if x, ok := x.GetResponse().(*DownloadFileMetadataResp_Err); ok {
		return x.Err
	}
	return ""
}

type isDownloadFileMetadataResp_Response interface {
	isDownloadFileMetadataResp_Response()
}

type DownloadFileMetadataResp_EncryptedFileMetadata struct {
	EncryptedFileMetadata *EncryptedFileMetadata `protobuf:"bytes,1,opt,name=encrypted_file_metadata,json=encryptedFileMetadata,proto3,oneof"`
}

type DownloadFileMetadataResp_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*DownloadFileMetadataResp_EncryptedFileMetadata) isDownloadFileMetadataResp_Response() {}

func (*DownloadFileMetadataResp_Err) isDownloadFileMetadataResp_Response() {}

type ListFileMetadataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ListFileMetadataResp_Metadatas
	//	*ListFileMetadataResp_Err
	Response isListFileMetadataResp_Response `protobuf_oneof:"response"`
}

func (x *ListFileMetadataResp) Reset() {
	*x = ListFileMetadataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFileMetadataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileMetadataResp) ProtoMessage() {}

func (x *ListFileMetadataResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileMetadataResp.ProtoReflect.Descriptor instead.
func (*ListFileMetadataResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{9}
}

func (m *ListFileMetadataResp) GetResponse() isListFileMetadataResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ListFileMetadataResp) GetMetadatas() *ListFileMetadataResp_FileMetadatas {
	if x, ok := x.GetResponse().(*ListFileMetadataResp_Metadatas); ok {
		return x.Metadatas
	}
	return nil
}

func (x *ListFileMetadataResp) GetErr() string {
	if x, ok := x.GetResponse().(*ListFileMetadataResp_Err); ok {
		return x.Err
	}
	return ""
}

type isListFileMetadataResp_Response interface {
	isListFileMetadataResp_Response()
}

type ListFileMetadataResp_Metadatas struct {
	Metadatas *ListFileMetadataResp_FileMetadatas `protobuf:"bytes,1,opt,name=metadatas,proto3,oneof"`
}

type ListFileMetadataResp_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*ListFileMetadataResp_Metadatas) isListFileMetadataResp_Response() {}

func (*ListFileMetadataResp_Err) isListFileMetadataResp_Response() {}

type ListChunkMetadataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ListChunkMetadataResp_Metadatas
	//	*ListChunkMetadataResp_Err
	Response isListChunkMetadataResp_Response `protobuf_oneof:"response"`
}

func (x *ListChunkMetadataResp) Reset() {
	*x = ListChunkMetadataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChunkMetadataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunkMetadataResp) ProtoMessage() {}

func (x *ListChunkMetadataResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunkMetadataResp.ProtoReflect.Descriptor instead.
func (*ListChunkMetadataResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{10}
}

func (m *ListChunkMetadataResp) GetResponse() isListChunkMetadataResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ListChunkMetadataResp) GetMetadatas() *ListChunkMetadataResp_ChunkMetadatas {
	if x, ok := x.GetResponse().(*ListChunkMetadataResp_Metadatas); ok {
		return x.Metadatas
	}
	return nil
}

func (x *ListChunkMetadataResp) GetErr() string {
	if x, ok := x.GetResponse().(*ListChunkMetadataResp_Err); ok {
		return x.Err
	}
	return ""
}

type isListChunkMetadataResp_Response interface {
	isListChunkMetadataResp_Response()
}

type ListChunkMetadataResp_Metadatas struct {
	Metadatas *ListChunkMetadataResp_ChunkMetadatas `protobuf:"bytes,1,opt,name=metadatas,proto3,oneof"`
}

type ListChunkMetadataResp_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*ListChunkMetadataResp_Metadatas) isListChunkMetadataResp_Response() {}

func (*ListChunkMetadataResp_Err) isListChunkMetadataResp_Response() {}

type GetUsageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetUsageResp_Usage_
	//	*GetUsageResp_Err
	Response isGetUsageResp_Response `protobuf_oneof:"response"`
}

func (x *GetUsageResp) Reset() {
	*x = GetUsageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsageResp) ProtoMessage() {}

func (x *GetUsageResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsageResp.ProtoReflect.Descriptor instead.
func (*GetUsageResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{11}
}

func (m *GetUsageResp) GetResponse() isGetUsageResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetUsageResp) GetUsage() *GetUsageResp_Usage {
	if x, ok := x.GetResponse().(*GetUsageResp_Usage_); ok {
		return x.Usage
	}
	return nil
}

func (x *GetUsageResp) GetErr() string {
	if x, ok := x.GetResponse().(*GetUsageResp_Err); ok {
		return x.Err
	}
	return ""
}

type isGetUsageResp_Response interface {
	isGetUsageResp_Response()
}

type GetUsageResp_Usage_ struct {
	Usage *GetUsageResp_Usage `protobuf:"bytes,1,opt,name=usage,proto3,oneof"`
}

type GetUsageResp_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*GetUsageResp_Usage_) isGetUsageResp_Response() {}

func (*GetUsageResp_Err) isGetUsageResp_Response() {}

type SetMasterEncryptionKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *string `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *SetMasterEncryptionKeyResp) Reset() {
	*x = SetMasterEncryptionKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMasterEncryptionKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMasterEncryptionKeyResp) ProtoMessage() {}

func (x *SetMasterEncryptionKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMasterEncryptionKeyResp.ProtoReflect.Descriptor instead.
func (*SetMasterEncryptionKeyResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{12}
}

func (x *SetMasterEncryptionKeyResp) GetErr() string {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return ""
}

type GetMasterEncryptionKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetMasterEncryptionKeyResp_EncryptedKey
	//	*GetMasterEncryptionKeyResp_Err
	Response isGetMasterEncryptionKeyResp_Response `protobuf_oneof:"response"`
}

func (x *GetMasterEncryptionKeyResp) Reset() {
	*x = GetMasterEncryptionKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterEncryptionKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterEncryptionKeyResp) ProtoMessage() {}

func (x *GetMasterEncryptionKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterEncryptionKeyResp.ProtoReflect.Descriptor instead.
func (*GetMasterEncryptionKeyResp) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{13}
}

func (m *GetMasterEncryptionKeyResp) GetResponse() isGetMasterEncryptionKeyResp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetMasterEncryptionKeyResp) GetEncryptedKey() []byte {
	if x, ok := x.GetResponse().(*GetMasterEncryptionKeyResp_EncryptedKey); ok {
		return x.EncryptedKey
	}
	return nil
}

func (x *GetMasterEncryptionKeyResp) GetErr() string {
	if x, ok := x.GetResponse().(*GetMasterEncryptionKeyResp_Err); ok {
		return x.Err
	}
	return ""
}

type isGetMasterEncryptionKeyResp_Response interface {
	isGetMasterEncryptionKeyResp_Response()
}

type GetMasterEncryptionKeyResp_EncryptedKey struct {
	EncryptedKey []byte `protobuf:"bytes,1,opt,name=encrypted_key,json=encryptedKey,proto3,oneof"`
}

type GetMasterEncryptionKeyResp_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*GetMasterEncryptionKeyResp_EncryptedKey) isGetMasterEncryptionKeyResp_Response() {}

func (*GetMasterEncryptionKeyResp_Err) isGetMasterEncryptionKeyResp_Response() {}

type EncryptedChunkMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EncMetadata []byte `protobuf:"bytes,2,opt,name=enc_metadata,json=encMetadata,proto3" json:"enc_metadata,omitempty"`
}

func (x *EncryptedChunkMetadata) Reset() {
	*x = EncryptedChunkMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedChunkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedChunkMetadata) ProtoMessage() {}

func (x *EncryptedChunkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedChunkMetadata.ProtoReflect.Descriptor instead.
func (*EncryptedChunkMetadata) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{14}
}

func (x *EncryptedChunkMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncryptedChunkMetadata) GetEncMetadata() []byte {
	if x != nil {
		return x.EncMetadata
	}
	return nil
}

type ChunkMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Size   uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Indice int64  `protobuf:"varint,4,opt,name=indice,proto3" json:"indice,omitempty"`
	Nonce  []byte `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ChunkMetadata) Reset() {
	*x = ChunkMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkMetadata) ProtoMessage() {}

func (x *ChunkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkMetadata.ProtoReflect.Descriptor instead.
func (*ChunkMetadata) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{15}
}

func (x *ChunkMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChunkMetadata) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ChunkMetadata) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkMetadata) GetIndice() int64 {
	if x != nil {
		return x.Indice
	}
	return 0
}

func (x *ChunkMetadata) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type FileServerMessage_UploadChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in bfsp.proto.
	ChunkMetadata    *ChunkMetadata          `protobuf:"bytes,1,opt,name=chunk_metadata,json=chunkMetadata,proto3" json:"chunk_metadata,omitempty"`
	Chunk            []byte                  `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	EncChunkMetadata *EncryptedChunkMetadata `protobuf:"bytes,3,opt,name=enc_chunk_metadata,json=encChunkMetadata,proto3" json:"enc_chunk_metadata,omitempty"`
}

func (x *FileServerMessage_UploadChunk) Reset() {
	*x = FileServerMessage_UploadChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_UploadChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_UploadChunk) ProtoMessage() {}

func (x *FileServerMessage_UploadChunk) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_UploadChunk.ProtoReflect.Descriptor instead.
func (*FileServerMessage_UploadChunk) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 0}
}

// Deprecated: Marked as deprecated in bfsp.proto.
func (x *FileServerMessage_UploadChunk) GetChunkMetadata() *ChunkMetadata {
	if x != nil {
		return x.ChunkMetadata
	}
	return nil
}

func (x *FileServerMessage_UploadChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *FileServerMessage_UploadChunk) GetEncChunkMetadata() *EncryptedChunkMetadata {
	if x != nil {
		return x.EncChunkMetadata
	}
	return nil
}

type FileServerMessage_ChunksUploadedQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkIds []string `protobuf:"bytes,1,rep,name=chunk_ids,json=chunkIds,proto3" json:"chunk_ids,omitempty"`
}

func (x *FileServerMessage_ChunksUploadedQuery) Reset() {
	*x = FileServerMessage_ChunksUploadedQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_ChunksUploadedQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_ChunksUploadedQuery) ProtoMessage() {}

func (x *FileServerMessage_ChunksUploadedQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_ChunksUploadedQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_ChunksUploadedQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 1}
}

func (x *FileServerMessage_ChunksUploadedQuery) GetChunkIds() []string {
	if x != nil {
		return x.ChunkIds
	}
	return nil
}

type FileServerMessage_ListChunkMetadataQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *FileServerMessage_ListChunkMetadataQuery) Reset() {
	*x = FileServerMessage_ListChunkMetadataQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_ListChunkMetadataQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_ListChunkMetadataQuery) ProtoMessage() {}

func (x *FileServerMessage_ListChunkMetadataQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_ListChunkMetadataQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_ListChunkMetadataQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 2}
}

func (x *FileServerMessage_ListChunkMetadataQuery) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type FileServerMessage_DownloadChunkQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (x *FileServerMessage_DownloadChunkQuery) Reset() {
	*x = FileServerMessage_DownloadChunkQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_DownloadChunkQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_DownloadChunkQuery) ProtoMessage() {}

func (x *FileServerMessage_DownloadChunkQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_DownloadChunkQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_DownloadChunkQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 3}
}

func (x *FileServerMessage_DownloadChunkQuery) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type FileServerMessage_DeleteChunksQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkIds []string `protobuf:"bytes,1,rep,name=chunk_ids,json=chunkIds,proto3" json:"chunk_ids,omitempty"`
}

func (x *FileServerMessage_DeleteChunksQuery) Reset() {
	*x = FileServerMessage_DeleteChunksQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_DeleteChunksQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_DeleteChunksQuery) ProtoMessage() {}

func (x *FileServerMessage_DeleteChunksQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_DeleteChunksQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_DeleteChunksQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 4}
}

func (x *FileServerMessage_DeleteChunksQuery) GetChunkIds() []string {
	if x != nil {
		return x.ChunkIds
	}
	return nil
}

type FileServerMessage_Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *FileServerMessage_Authentication) Reset() {
	*x = FileServerMessage_Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_Authentication) ProtoMessage() {}

func (x *FileServerMessage_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_Authentication.ProtoReflect.Descriptor instead.
func (*FileServerMessage_Authentication) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 5}
}

func (x *FileServerMessage_Authentication) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type FileServerMessage_UploadFileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedFileMetadata *EncryptedFileMetadata `protobuf:"bytes,1,opt,name=encrypted_file_metadata,json=encryptedFileMetadata,proto3" json:"encrypted_file_metadata,omitempty"`
}

func (x *FileServerMessage_UploadFileMetadata) Reset() {
	*x = FileServerMessage_UploadFileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_UploadFileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_UploadFileMetadata) ProtoMessage() {}

func (x *FileServerMessage_UploadFileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_UploadFileMetadata.ProtoReflect.Descriptor instead.
func (*FileServerMessage_UploadFileMetadata) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 6}
}

func (x *FileServerMessage_UploadFileMetadata) GetEncryptedFileMetadata() *EncryptedFileMetadata {
	if x != nil {
		return x.EncryptedFileMetadata
	}
	return nil
}

type FileServerMessage_DownloadFileMetadataQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FileServerMessage_DownloadFileMetadataQuery) Reset() {
	*x = FileServerMessage_DownloadFileMetadataQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_DownloadFileMetadataQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_DownloadFileMetadataQuery) ProtoMessage() {}

func (x *FileServerMessage_DownloadFileMetadataQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_DownloadFileMetadataQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_DownloadFileMetadataQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 7}
}

func (x *FileServerMessage_DownloadFileMetadataQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FileServerMessage_ListFileMetadataQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *FileServerMessage_ListFileMetadataQuery) Reset() {
	*x = FileServerMessage_ListFileMetadataQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_ListFileMetadataQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_ListFileMetadataQuery) ProtoMessage() {}

func (x *FileServerMessage_ListFileMetadataQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_ListFileMetadataQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_ListFileMetadataQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 8}
}

func (x *FileServerMessage_ListFileMetadataQuery) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type FileServerMessage_DeleteFileMetadataQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FileServerMessage_DeleteFileMetadataQuery) Reset() {
	*x = FileServerMessage_DeleteFileMetadataQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_DeleteFileMetadataQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_DeleteFileMetadataQuery) ProtoMessage() {}

func (x *FileServerMessage_DeleteFileMetadataQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_DeleteFileMetadataQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_DeleteFileMetadataQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 9}
}

func (x *FileServerMessage_DeleteFileMetadataQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FileServerMessage_GetUsageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileServerMessage_GetUsageQuery) Reset() {
	*x = FileServerMessage_GetUsageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_GetUsageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_GetUsageQuery) ProtoMessage() {}

func (x *FileServerMessage_GetUsageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_GetUsageQuery.ProtoReflect.Descriptor instead.
func (*FileServerMessage_GetUsageQuery) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 10}
}

type FileServerMessage_SetMasterEncryptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedKey []byte `protobuf:"bytes,1,opt,name=encrypted_key,json=encryptedKey,proto3" json:"encrypted_key,omitempty"`
}

func (x *FileServerMessage_SetMasterEncryptionKey) Reset() {
	*x = FileServerMessage_SetMasterEncryptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_SetMasterEncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_SetMasterEncryptionKey) ProtoMessage() {}

func (x *FileServerMessage_SetMasterEncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_SetMasterEncryptionKey.ProtoReflect.Descriptor instead.
func (*FileServerMessage_SetMasterEncryptionKey) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 11}
}

func (x *FileServerMessage_SetMasterEncryptionKey) GetEncryptedKey() []byte {
	if x != nil {
		return x.EncryptedKey
	}
	return nil
}

type FileServerMessage_GetMasterEncryptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileServerMessage_GetMasterEncryptionKey) Reset() {
	*x = FileServerMessage_GetMasterEncryptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServerMessage_GetMasterEncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServerMessage_GetMasterEncryptionKey) ProtoMessage() {}

func (x *FileServerMessage_GetMasterEncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServerMessage_GetMasterEncryptionKey.ProtoReflect.Descriptor instead.
func (*FileServerMessage_GetMasterEncryptionKey) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{1, 12}
}

type DownloadChunkResp_ChunkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in bfsp.proto.
	ChunkMetadata    *ChunkMetadata          `protobuf:"bytes,1,opt,name=chunk_metadata,json=chunkMetadata,proto3" json:"chunk_metadata,omitempty"`
	Chunk            []byte                  `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	EncChunkMetadata *EncryptedChunkMetadata `protobuf:"bytes,3,opt,name=enc_chunk_metadata,json=encChunkMetadata,proto3" json:"enc_chunk_metadata,omitempty"`
}

func (x *DownloadChunkResp_ChunkData) Reset() {
	*x = DownloadChunkResp_ChunkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChunkResp_ChunkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkResp_ChunkData) ProtoMessage() {}

func (x *DownloadChunkResp_ChunkData) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkResp_ChunkData.ProtoReflect.Descriptor instead.
func (*DownloadChunkResp_ChunkData) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{3, 0}
}

// Deprecated: Marked as deprecated in bfsp.proto.
func (x *DownloadChunkResp_ChunkData) GetChunkMetadata() *ChunkMetadata {
	if x != nil {
		return x.ChunkMetadata
	}
	return nil
}

func (x *DownloadChunkResp_ChunkData) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *DownloadChunkResp_ChunkData) GetEncChunkMetadata() *EncryptedChunkMetadata {
	if x != nil {
		return x.EncChunkMetadata
	}
	return nil
}

type ChunksUploadedQueryResp_ChunkUploaded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId  []byte `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Uploaded bool   `protobuf:"varint,2,opt,name=uploaded,proto3" json:"uploaded,omitempty"`
}

func (x *ChunksUploadedQueryResp_ChunkUploaded) Reset() {
	*x = ChunksUploadedQueryResp_ChunkUploaded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunksUploadedQueryResp_ChunkUploaded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksUploadedQueryResp_ChunkUploaded) ProtoMessage() {}

func (x *ChunksUploadedQueryResp_ChunkUploaded) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksUploadedQueryResp_ChunkUploaded.ProtoReflect.Descriptor instead.
func (*ChunksUploadedQueryResp_ChunkUploaded) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ChunksUploadedQueryResp_ChunkUploaded) GetChunkId() []byte {
	if x != nil {
		return x.ChunkId
	}
	return nil
}

func (x *ChunksUploadedQueryResp_ChunkUploaded) GetUploaded() bool {
	if x != nil {
		return x.Uploaded
	}
	return false
}

type ChunksUploadedQueryResp_ChunksUploaded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks []*ChunksUploadedQueryResp_ChunkUploaded `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *ChunksUploadedQueryResp_ChunksUploaded) Reset() {
	*x = ChunksUploadedQueryResp_ChunksUploaded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunksUploadedQueryResp_ChunksUploaded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksUploadedQueryResp_ChunksUploaded) ProtoMessage() {}

func (x *ChunksUploadedQueryResp_ChunksUploaded) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksUploadedQueryResp_ChunksUploaded.ProtoReflect.Descriptor instead.
func (*ChunksUploadedQueryResp_ChunksUploaded) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ChunksUploadedQueryResp_ChunksUploaded) GetChunks() []*ChunksUploadedQueryResp_ChunkUploaded {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type ListFileMetadataResp_FileMetadatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadatas map[string]*EncryptedFileMetadata `protobuf:"bytes,1,rep,name=metadatas,proto3" json:"metadatas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListFileMetadataResp_FileMetadatas) Reset() {
	*x = ListFileMetadataResp_FileMetadatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFileMetadataResp_FileMetadatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileMetadataResp_FileMetadatas) ProtoMessage() {}

func (x *ListFileMetadataResp_FileMetadatas) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileMetadataResp_FileMetadatas.ProtoReflect.Descriptor instead.
func (*ListFileMetadataResp_FileMetadatas) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListFileMetadataResp_FileMetadatas) GetMetadatas() map[string]*EncryptedFileMetadata {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

type ListChunkMetadataResp_ChunkMetadatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadatas map[string]*ChunkMetadata `protobuf:"bytes,1,rep,name=metadatas,proto3" json:"metadatas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListChunkMetadataResp_ChunkMetadatas) Reset() {
	*x = ListChunkMetadataResp_ChunkMetadatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChunkMetadataResp_ChunkMetadatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunkMetadataResp_ChunkMetadatas) ProtoMessage() {}

func (x *ListChunkMetadataResp_ChunkMetadatas) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunkMetadataResp_ChunkMetadatas.ProtoReflect.Descriptor instead.
func (*ListChunkMetadataResp_ChunkMetadatas) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListChunkMetadataResp_ChunkMetadatas) GetMetadatas() map[string]*ChunkMetadata {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

type GetUsageResp_Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUsage uint64 `protobuf:"varint,1,opt,name=total_usage,json=totalUsage,proto3" json:"total_usage,omitempty"`
	StorageCap uint64 `protobuf:"varint,2,opt,name=storage_cap,json=storageCap,proto3" json:"storage_cap,omitempty"`
}

func (x *GetUsageResp_Usage) Reset() {
	*x = GetUsageResp_Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfsp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsageResp_Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsageResp_Usage) ProtoMessage() {}

func (x *GetUsageResp_Usage) ProtoReflect() protoreflect.Message {
	mi := &file_bfsp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsageResp_Usage.ProtoReflect.Descriptor instead.
func (*GetUsageResp_Usage) Descriptor() ([]byte, []int) {
	return file_bfsp_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetUsageResp_Usage) GetTotalUsage() uint64 {
	if x != nil {
		return x.TotalUsage
	}
	return 0
}

func (x *GetUsageResp_Usage) GetStorageCap() uint64 {
	if x != nil {
		return x.StorageCap
	}
	return 0
}

var File_bfsp_proto protoreflect.FileDescriptor

var file_bfsp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x66,
	0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb7, 0x10,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x66,
	0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x67, 0x0a, 0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64,
	0x0a, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62,
	0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7a, 0x0a,
	0x1c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x19,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x6e, 0x0a, 0x18, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x66,
	0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x71, 0x0a, 0x19, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62,
	0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x74, 0x0a, 0x1a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x55, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x66,
	0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5c, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x1a, 0xbb, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x50, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x32, 0x0a, 0x13, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x1a, 0x2a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x1a, 0x2f, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x1a, 0x30, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x1a, 0x26, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x6f,
	0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x2b, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x29, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x3d, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x1a, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x48, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0xb9, 0x01,
	0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x50, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12,
	0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x1a, 0x46, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x1a, 0x5b, 0x0a, 0x0e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x37, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72,
	0x22, 0x37, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x09,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x48,
	0x00, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x1a, 0xcd, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x1a,
	0x5f, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x66, 0x73, 0x70,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0xc8, 0x01, 0x0a,
	0x0e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12,
	0x5d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x1a, 0x57,
	0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x66, 0x73, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x1a, 0x49, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x72, 0x72, 0x22, 0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x16, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bfsp_proto_rawDescOnce sync.Once
	file_bfsp_proto_rawDescData = file_bfsp_proto_rawDesc
)

func file_bfsp_proto_rawDescGZIP() []byte {
	file_bfsp_proto_rawDescOnce.Do(func() {
		file_bfsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_bfsp_proto_rawDescData)
	})
	return file_bfsp_proto_rawDescData
}

var file_bfsp_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_bfsp_proto_goTypes = []any{
	(*EncryptedFileMetadata)(nil),                       // 0: bfsp.files.EncryptedFileMetadata
	(*FileServerMessage)(nil),                           // 1: bfsp.files.FileServerMessage
	(*UploadChunkResp)(nil),                             // 2: bfsp.files.UploadChunkResp
	(*DownloadChunkResp)(nil),                           // 3: bfsp.files.DownloadChunkResp
	(*ChunksUploadedQueryResp)(nil),                     // 4: bfsp.files.ChunksUploadedQueryResp
	(*DeleteChunksResp)(nil),                            // 5: bfsp.files.DeleteChunksResp
	(*DeleteFileMetadataResp)(nil),                      // 6: bfsp.files.DeleteFileMetadataResp
	(*UploadFileMetadataResp)(nil),                      // 7: bfsp.files.UploadFileMetadataResp
	(*DownloadFileMetadataResp)(nil),                    // 8: bfsp.files.DownloadFileMetadataResp
	(*ListFileMetadataResp)(nil),                        // 9: bfsp.files.ListFileMetadataResp
	(*ListChunkMetadataResp)(nil),                       // 10: bfsp.files.ListChunkMetadataResp
	(*GetUsageResp)(nil),                                // 11: bfsp.files.GetUsageResp
	(*SetMasterEncryptionKeyResp)(nil),                  // 12: bfsp.files.SetMasterEncryptionKeyResp
	(*GetMasterEncryptionKeyResp)(nil),                  // 13: bfsp.files.GetMasterEncryptionKeyResp
	(*EncryptedChunkMetadata)(nil),                      // 14: bfsp.files.EncryptedChunkMetadata
	(*ChunkMetadata)(nil),                               // 15: bfsp.files.ChunkMetadata
	(*FileServerMessage_UploadChunk)(nil),               // 16: bfsp.files.FileServerMessage.UploadChunk
	(*FileServerMessage_ChunksUploadedQuery)(nil),       // 17: bfsp.files.FileServerMessage.ChunksUploadedQuery
	(*FileServerMessage_ListChunkMetadataQuery)(nil),    // 18: bfsp.files.FileServerMessage.ListChunkMetadataQuery
	(*FileServerMessage_DownloadChunkQuery)(nil),        // 19: bfsp.files.FileServerMessage.DownloadChunkQuery
	(*FileServerMessage_DeleteChunksQuery)(nil),         // 20: bfsp.files.FileServerMessage.DeleteChunksQuery
	(*FileServerMessage_Authentication)(nil),            // 21: bfsp.files.FileServerMessage.Authentication
	(*FileServerMessage_UploadFileMetadata)(nil),        // 22: bfsp.files.FileServerMessage.UploadFileMetadata
	(*FileServerMessage_DownloadFileMetadataQuery)(nil), // 23: bfsp.files.FileServerMessage.DownloadFileMetadataQuery
	(*FileServerMessage_ListFileMetadataQuery)(nil),     // 24: bfsp.files.FileServerMessage.ListFileMetadataQuery
	(*FileServerMessage_DeleteFileMetadataQuery)(nil),   // 25: bfsp.files.FileServerMessage.DeleteFileMetadataQuery
	(*FileServerMessage_GetUsageQuery)(nil),             // 26: bfsp.files.FileServerMessage.GetUsageQuery
	(*FileServerMessage_SetMasterEncryptionKey)(nil),    // 27: bfsp.files.FileServerMessage.SetMasterEncryptionKey
	(*FileServerMessage_GetMasterEncryptionKey)(nil),    // 28: bfsp.files.FileServerMessage.GetMasterEncryptionKey
	(*DownloadChunkResp_ChunkData)(nil),                 // 29: bfsp.files.DownloadChunkResp.ChunkData
	(*ChunksUploadedQueryResp_ChunkUploaded)(nil),       // 30: bfsp.files.ChunksUploadedQueryResp.ChunkUploaded
	(*ChunksUploadedQueryResp_ChunksUploaded)(nil),      // 31: bfsp.files.ChunksUploadedQueryResp.ChunksUploaded
	(*ListFileMetadataResp_FileMetadatas)(nil),          // 32: bfsp.files.ListFileMetadataResp.FileMetadatas
	nil, // 33: bfsp.files.ListFileMetadataResp.FileMetadatas.MetadatasEntry
	(*ListChunkMetadataResp_ChunkMetadatas)(nil), // 34: bfsp.files.ListChunkMetadataResp.ChunkMetadatas
	nil,                        // 35: bfsp.files.ListChunkMetadataResp.ChunkMetadatas.MetadatasEntry
	(*GetUsageResp_Usage)(nil), // 36: bfsp.files.GetUsageResp.Usage
}
var file_bfsp_proto_depIdxs = []int32{
	21, // 0: bfsp.files.FileServerMessage.auth:type_name -> bfsp.files.FileServerMessage.Authentication
	16, // 1: bfsp.files.FileServerMessage.upload_chunk:type_name -> bfsp.files.FileServerMessage.UploadChunk
	17, // 2: bfsp.files.FileServerMessage.chunks_uploaded_query:type_name -> bfsp.files.FileServerMessage.ChunksUploadedQuery
	19, // 3: bfsp.files.FileServerMessage.download_chunk_query:type_name -> bfsp.files.FileServerMessage.DownloadChunkQuery
	20, // 4: bfsp.files.FileServerMessage.delete_chunks_query:type_name -> bfsp.files.FileServerMessage.DeleteChunksQuery
	22, // 5: bfsp.files.FileServerMessage.upload_file_metadata:type_name -> bfsp.files.FileServerMessage.UploadFileMetadata
	23, // 6: bfsp.files.FileServerMessage.download_file_metadata_query:type_name -> bfsp.files.FileServerMessage.DownloadFileMetadataQuery
	24, // 7: bfsp.files.FileServerMessage.list_file_metadata_query:type_name -> bfsp.files.FileServerMessage.ListFileMetadataQuery
	18, // 8: bfsp.files.FileServerMessage.list_chunk_metadata_query:type_name -> bfsp.files.FileServerMessage.ListChunkMetadataQuery
	25, // 9: bfsp.files.FileServerMessage.delete_file_metadata_query:type_name -> bfsp.files.FileServerMessage.DeleteFileMetadataQuery
	26, // 10: bfsp.files.FileServerMessage.get_usage_query:type_name -> bfsp.files.FileServerMessage.GetUsageQuery
	27, // 11: bfsp.files.FileServerMessage.set_master_key:type_name -> bfsp.files.FileServerMessage.SetMasterEncryptionKey
	28, // 12: bfsp.files.FileServerMessage.get_master_key:type_name -> bfsp.files.FileServerMessage.GetMasterEncryptionKey
	29, // 13: bfsp.files.DownloadChunkResp.chunk_data:type_name -> bfsp.files.DownloadChunkResp.ChunkData
	31, // 14: bfsp.files.ChunksUploadedQueryResp.chunks:type_name -> bfsp.files.ChunksUploadedQueryResp.ChunksUploaded
	0,  // 15: bfsp.files.DownloadFileMetadataResp.encrypted_file_metadata:type_name -> bfsp.files.EncryptedFileMetadata
	32, // 16: bfsp.files.ListFileMetadataResp.metadatas:type_name -> bfsp.files.ListFileMetadataResp.FileMetadatas
	34, // 17: bfsp.files.ListChunkMetadataResp.metadatas:type_name -> bfsp.files.ListChunkMetadataResp.ChunkMetadatas
	36, // 18: bfsp.files.GetUsageResp.usage:type_name -> bfsp.files.GetUsageResp.Usage
	15, // 19: bfsp.files.FileServerMessage.UploadChunk.chunk_metadata:type_name -> bfsp.files.ChunkMetadata
	14, // 20: bfsp.files.FileServerMessage.UploadChunk.enc_chunk_metadata:type_name -> bfsp.files.EncryptedChunkMetadata
	0,  // 21: bfsp.files.FileServerMessage.UploadFileMetadata.encrypted_file_metadata:type_name -> bfsp.files.EncryptedFileMetadata
	15, // 22: bfsp.files.DownloadChunkResp.ChunkData.chunk_metadata:type_name -> bfsp.files.ChunkMetadata
	14, // 23: bfsp.files.DownloadChunkResp.ChunkData.enc_chunk_metadata:type_name -> bfsp.files.EncryptedChunkMetadata
	30, // 24: bfsp.files.ChunksUploadedQueryResp.ChunksUploaded.chunks:type_name -> bfsp.files.ChunksUploadedQueryResp.ChunkUploaded
	33, // 25: bfsp.files.ListFileMetadataResp.FileMetadatas.metadatas:type_name -> bfsp.files.ListFileMetadataResp.FileMetadatas.MetadatasEntry
	0,  // 26: bfsp.files.ListFileMetadataResp.FileMetadatas.MetadatasEntry.value:type_name -> bfsp.files.EncryptedFileMetadata
	35, // 27: bfsp.files.ListChunkMetadataResp.ChunkMetadatas.metadatas:type_name -> bfsp.files.ListChunkMetadataResp.ChunkMetadatas.MetadatasEntry
	15, // 28: bfsp.files.ListChunkMetadataResp.ChunkMetadatas.MetadatasEntry.value:type_name -> bfsp.files.ChunkMetadata
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_bfsp_proto_init() }
func file_bfsp_proto_init() {
	if File_bfsp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bfsp_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EncryptedFileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UploadChunkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadChunkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ChunksUploadedQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteChunksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteFileMetadataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UploadFileMetadataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadFileMetadataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListFileMetadataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListChunkMetadataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetUsageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SetMasterEncryptionKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetMasterEncryptionKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*EncryptedChunkMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_UploadChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_ChunksUploadedQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_ListChunkMetadataQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_DownloadChunkQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_DeleteChunksQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_UploadFileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_DownloadFileMetadataQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_ListFileMetadataQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_DeleteFileMetadataQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_GetUsageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_SetMasterEncryptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FileServerMessage_GetMasterEncryptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadChunkResp_ChunkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ChunksUploadedQueryResp_ChunkUploaded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ChunksUploadedQueryResp_ChunksUploaded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ListFileMetadataResp_FileMetadatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ListChunkMetadataResp_ChunkMetadatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfsp_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetUsageResp_Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bfsp_proto_msgTypes[1].OneofWrappers = []any{
		(*FileServerMessage_UploadChunk_)(nil),
		(*FileServerMessage_ChunksUploadedQuery_)(nil),
		(*FileServerMessage_DownloadChunkQuery_)(nil),
		(*FileServerMessage_DeleteChunksQuery_)(nil),
		(*FileServerMessage_UploadFileMetadata_)(nil),
		(*FileServerMessage_DownloadFileMetadataQuery_)(nil),
		(*FileServerMessage_ListFileMetadataQuery_)(nil),
		(*FileServerMessage_ListChunkMetadataQuery_)(nil),
		(*FileServerMessage_DeleteFileMetadataQuery_)(nil),
		(*FileServerMessage_GetUsageQuery_)(nil),
		(*FileServerMessage_SetMasterKey)(nil),
		(*FileServerMessage_GetMasterKey)(nil),
	}
	file_bfsp_proto_msgTypes[2].OneofWrappers = []any{}
	file_bfsp_proto_msgTypes[3].OneofWrappers = []any{
		(*DownloadChunkResp_ChunkData_)(nil),
		(*DownloadChunkResp_Err)(nil),
	}
	file_bfsp_proto_msgTypes[4].OneofWrappers = []any{
		(*ChunksUploadedQueryResp_Chunks)(nil),
		(*ChunksUploadedQueryResp_Err)(nil),
	}
	file_bfsp_proto_msgTypes[5].OneofWrappers = []any{}
	file_bfsp_proto_msgTypes[6].OneofWrappers = []any{}
	file_bfsp_proto_msgTypes[7].OneofWrappers = []any{}
	file_bfsp_proto_msgTypes[8].OneofWrappers = []any{
		(*DownloadFileMetadataResp_EncryptedFileMetadata)(nil),
		(*DownloadFileMetadataResp_Err)(nil),
	}
	file_bfsp_proto_msgTypes[9].OneofWrappers = []any{
		(*ListFileMetadataResp_Metadatas)(nil),
		(*ListFileMetadataResp_Err)(nil),
	}
	file_bfsp_proto_msgTypes[10].OneofWrappers = []any{
		(*ListChunkMetadataResp_Metadatas)(nil),
		(*ListChunkMetadataResp_Err)(nil),
	}
	file_bfsp_proto_msgTypes[11].OneofWrappers = []any{
		(*GetUsageResp_Usage_)(nil),
		(*GetUsageResp_Err)(nil),
	}
	file_bfsp_proto_msgTypes[12].OneofWrappers = []any{}
	file_bfsp_proto_msgTypes[13].OneofWrappers = []any{
		(*GetMasterEncryptionKeyResp_EncryptedKey)(nil),
		(*GetMasterEncryptionKeyResp_Err)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bfsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bfsp_proto_goTypes,
		DependencyIndexes: file_bfsp_proto_depIdxs,
		MessageInfos:      file_bfsp_proto_msgTypes,
	}.Build()
	File_bfsp_proto = out.File
	file_bfsp_proto_rawDesc = nil
	file_bfsp_proto_goTypes = nil
	file_bfsp_proto_depIdxs = nil
}
